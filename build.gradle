import com.github.jengelman.gradle.plugins.shadow.tasks.ConfigureShadowRelocation

plugins {
    id 'java'
    id 'com.github.johnrengelman.shadow' version '7.0.0'
    id 'java-library'
    id 'maven-publish'
}
allprojects {
    apply plugin: 'java'
    apply plugin: 'com.github.johnrengelman.shadow'
    apply plugin: 'java-library'
    apply plugin: 'maven-publish'

    repositories {
        mavenCentral()
        maven {
            url 'https://papermc.io/repo/repository/maven-public/'
        }
        maven {
            url 'https://repo.aikar.co/content/groups/aikar/'
        }
        flatDir {
            dirs 'lib'
        }
        maven {
            url 'https://jitpack.io'
        }
    }
    configurations.all {
        resolutionStrategy.cacheDynamicVersionsFor(1, 'seconds')
        resolutionStrategy.cacheChangingModulesFor 1, 'seconds'
    }

    dependencies {
        compileOnly 'io.papermc.paper:paper-api:1.17-R0.1-SNAPSHOT'
        compileOnly 'com.github.amp7368:PluginAppleUtilityLibraries:Aul-v1.1'
        compileOnly 'co.aikar:acf-paper:0.5.0-SNAPSHOT'
    }
}
if (new File('private.build.gradle').exists())
    apply from: 'private.build.gradle'
if (new File('private-gradle.properties').exists())
    apply from: 'private-gradle.properties'

task relocateShadowJar(type: ConfigureShadowRelocation) {
    target = tasks.shadowJar
    prefix = packageValue // Default value is "shadow"
}
test {
    useJUnitPlatform()
}

group groupValue
version versionValue

publishing {
    publications {
        fullPublication(MavenPublication) {
            artifact shadowJar
            pom {
                group = project.group
                version = project.version
                name = project.name
            }
        }
    }
}

project.targetCompatibility = JavaVersion.VERSION_16
project.sourceCompatibility = JavaVersion.VERSION_16

jar {
    outputs.upToDateWhen { false }
}
processResources {
    outputs.upToDateWhen { false }
}
classes {
    outputs.upToDateWhen { false }
}
compileJava {
    outputs.upToDateWhen { false }
}
shadowJar {
    dependsOn(relocateShadowJar)
    outputs.upToDateWhen { false }
    archiveClassifier.set('')
}


